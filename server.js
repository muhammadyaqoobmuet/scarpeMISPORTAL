import express from 'express';
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

// Convert exec to promise for easier async handling
const execAsync = promisify(exec);

// Middleware to parse JSON requests
app.use(express.json());

// Enable CORS for all routes
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    if (req.method === 'OPTIONS') {
        return res.sendStatus(200);
    }
    
    next();
});

// Function to run scraper and get fresh data
async function fetchFreshAttendanceData() {
    try {
        console.log('🔄 Running scraper to fetch fresh attendance data...');
        
        // Run the scraper
        const { stdout, stderr } = await execAsync('node scraper.js');
        
        if (stderr) {
            console.error('Scraper stderr:', stderr);
        }
        
        console.log('✅ Scraper completed successfully');
        
        // Read the generated attendance.json file
        const attendanceFile = path.join(__dirname, 'attendance.json');
        
        if (fs.existsSync(attendanceFile)) {
            const attendanceData = JSON.parse(fs.readFileSync(attendanceFile, 'utf8'));
            return attendanceData;
        } else {
            throw new Error('Attendance file not generated by scraper');
        }
        
    } catch (error) {
        console.error('❌ Error fetching attendance data:', error);
        throw error;
    }
}

// Route to get attendance data (runs scraper each time)
app.get('/api/attendance', async (req, res) => {
    try {
        console.log('📡 New request for attendance data');
        
        // Always fetch fresh data
        const attendanceData = await fetchFreshAttendanceData();
        
        res.json({
            success: true,
            data: attendanceData,
            timestamp: new Date().toISOString(),
            fresh: true,
            message: "Data fetched fresh from MIS"
        });
        
    } catch (error) {
        console.error('Error in attendance API:', error);
        res.status(503).json({
            success: false,
            error: "Attendance data not available",
            message: "Unable to fetch attendance data from MIS. Please try again later.",
            details: error.message
        });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        message: 'Server is running and ready to fetch attendance data'
    });
});

// Root endpoint with API info
app.get('/', (req, res) => {
    res.json({
        name: 'MIS Attendance API',
        version: '1.0.0',
        description: 'Live attendance data from MIS (fetches fresh data on each request)',
        endpoints: {
            '/health': 'Health check',
            '/api/attendance': 'Get live attendance data (runs scraper each time)'
        },
        status: 'running',
        uptime: process.uptime(),
        timestamp: new Date().toISOString(),
        note: "Each request to /api/attendance will fetch fresh data from MIS. Cache on frontend as needed."
    });
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Unhandled error:', err);
    res.status(500).json({
        success: false,
        error: 'Internal server error',
        message: err.message
    });
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Endpoint not found',
        message: `${req.method} ${req.originalUrl} not found`
    });
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM received, shutting down gracefully');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('SIGINT received, shutting down gracefully');
    process.exit(0);
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`🚀 MIS Attendance API running on port ${PORT}`);
    console.log(`📊 Live API: /api/attendance (fetches fresh data each time)`);
    console.log(`🔧 Health check: /health`);
    console.log(`📖 Documentation: /`);
    console.log(`⚠️  Note: Each API call runs the scraper - implement caching on frontend`);
});